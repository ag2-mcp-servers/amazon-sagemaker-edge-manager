# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:39:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class CacheTTLSeconds(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class ChecksumString(
    RootModel[constr(pattern=r'^[a-z0-9](-*[a-z0-9])*$', min_length=1, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9](-*[a-z0-9])*$', min_length=1, max_length=63)


class ChecksumType(Enum):
    SHA1 = 'SHA1'


class DeploymentStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAIL = 'FAIL'


class DeploymentType(Enum):
    Model = 'Model'


class DeviceFleetName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63)
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    )


class DeviceName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63)
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    )


class DeviceRegistration(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class Dimension(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9\/])*$', min_length=1, max_length=1000
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9\/])*$', min_length=1, max_length=1000
    )


class EntityName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=1, max_length=63)


class FailureHandlingPolicy(Enum):
    ROLLBACK_ON_FAILURE = 'ROLLBACK_ON_FAILURE'
    DO_NOTHING = 'DO_NOTHING'


class GetDeploymentsRequest(BaseModel):
    DeviceFleetName_1: DeviceFleetName = Field(..., alias='DeviceFleetName')
    DeviceName_1: DeviceName = Field(..., alias='DeviceName')


class GetDeviceRegistrationRequest(BaseModel):
    DeviceFleetName_1: DeviceFleetName = Field(..., alias='DeviceFleetName')
    DeviceName_1: DeviceName = Field(..., alias='DeviceName')


class GetDeviceRegistrationResult(BaseModel):
    CacheTTL: Optional[CacheTTLSeconds] = None
    DeviceRegistration_1: Optional[DeviceRegistration] = Field(
        None, alias='DeviceRegistration'
    )


class InternalServiceException(RootModel[Any]):
    root: Any


class Metric(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=4, max_length=100)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=4, max_length=100)


class ModelName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=4, max_length=255)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=4, max_length=255)


class ModelState(Enum):
    DEPLOY = 'DEPLOY'
    UNDEPLOY = 'UNDEPLOY'


class S3Uri(RootModel[constr(pattern=r'^s3://([^/]+)/?(.*)$', max_length=1024)]):
    root: constr(pattern=r'^s3://([^/]+)/?(.*)$', max_length=1024)


class String(RootModel[str]):
    root: str


class Timestamp(RootModel[datetime]):
    root: datetime


class Value(RootModel[float]):
    root: float


class Version(
    RootModel[constr(pattern=r'[a-zA-Z0-9\ \_\.]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9\ \_\.]+', min_length=1, max_length=64)


class GetDeploymentsPostRequest(BaseModel):
    DeviceFleetName: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    ) = Field(..., description='The name of the fleet that the device belongs to.')
    DeviceName: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    ) = Field(
        ...,
        description='The unique name of the device you want to get the configuration of active deployments from.',
    )


class GetDeviceRegistrationPostRequest(BaseModel):
    DeviceFleetName: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    ) = Field(..., description='The name of the fleet that the device belongs to.')
    DeviceName: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    ) = Field(
        ...,
        description='The unique name of the device you want to get the registration status from.',
    )


class Checksum(BaseModel):
    Sum: Optional[ChecksumString] = None
    Type: Optional[ChecksumType] = None


class Definition(BaseModel):
    Checksum_1: Optional[Checksum] = Field(None, alias='Checksum')
    ModelHandle: Optional[EntityName] = None
    S3Url: Optional[S3Uri] = None
    State: Optional[ModelState] = None


class Definitions(RootModel[List[Definition]]):
    root: List[Definition]


class DeploymentModel(BaseModel):
    DesiredState: Optional[ModelState] = None
    ModelHandle: Optional[EntityName] = None
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    ModelVersion: Optional[Version] = None
    RollbackFailureReason: Optional[String] = None
    State: Optional[ModelState] = None
    Status: Optional[DeploymentStatus] = None
    StatusReason: Optional[String] = None


class DeploymentModels(RootModel[List[DeploymentModel]]):
    root: List[DeploymentModel]


class DeploymentResult(BaseModel):
    DeploymentEndTime: Optional[Timestamp] = None
    DeploymentModels_1: Optional[DeploymentModels] = Field(
        None, alias='DeploymentModels'
    )
    DeploymentName: Optional[EntityName] = None
    DeploymentStartTime: Optional[Timestamp] = None
    DeploymentStatus: Optional[EntityName] = None
    DeploymentStatusMessage: Optional[String] = None


class EdgeDeployment(BaseModel):
    Definitions_1: Optional[Definitions] = Field(None, alias='Definitions')
    DeploymentName: Optional[EntityName] = None
    FailureHandlingPolicy_1: Optional[FailureHandlingPolicy] = Field(
        None, alias='FailureHandlingPolicy'
    )
    Type: Optional[DeploymentType] = None


class EdgeDeployments(RootModel[List[EdgeDeployment]]):
    root: List[EdgeDeployment]


class EdgeMetric(BaseModel):
    Dimension_1: Optional[Dimension] = Field(None, alias='Dimension')
    MetricName: Optional[Metric] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Value_1: Optional[Value] = Field(None, alias='Value')


class EdgeMetrics(RootModel[List[EdgeMetric]]):
    root: List[EdgeMetric]


class GetDeploymentsResult(BaseModel):
    Deployments: Optional[EdgeDeployments] = None


class Model(BaseModel):
    LatestInference: Optional[Timestamp] = None
    LatestSampleTime: Optional[Timestamp] = None
    ModelMetrics: Optional[EdgeMetrics] = None
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    ModelVersion: Optional[Version] = None


class Models(RootModel[List[Model]]):
    root: List[Model]


class SendHeartbeatRequest(BaseModel):
    AgentMetrics: Optional[EdgeMetrics] = None
    AgentVersion: Version
    DeploymentResult_1: Optional[DeploymentResult] = Field(
        None, alias='DeploymentResult'
    )
    DeviceFleetName_1: DeviceFleetName = Field(..., alias='DeviceFleetName')
    DeviceName_1: DeviceName = Field(..., alias='DeviceName')
    Models_1: Optional[Models] = Field(None, alias='Models')


class SendHeartbeatPostRequest(BaseModel):
    AgentMetrics: Optional[List[EdgeMetric]] = Field(
        None,
        description='For internal use. Returns a list of SageMaker Edge Manager agent operating metrics.',
    )
    AgentVersion: constr(pattern=r'[a-zA-Z0-9\ \_\.]+', min_length=1, max_length=64) = (
        Field(..., description='Returns the version of the agent.')
    )
    DeploymentResult_1: Optional[DeploymentResult] = Field(
        None,
        alias='DeploymentResult',
        description='Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager.',
    )
    DeviceFleetName: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    ) = Field(..., description='The name of the fleet that the device belongs to.')
    DeviceName: constr(
        pattern=r'^[a-zA-Z0-9](-*_*[a-zA-Z0-9])*$', min_length=1, max_length=63
    ) = Field(..., description='The unique name of the device.')
    Models: Optional[List[Model]] = Field(
        None, description='Returns a list of models deployed on the the device.'
    )
